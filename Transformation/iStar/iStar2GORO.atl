-- @path iStar=/GOROTool/Metamodels/iStar.ecore
-- @path GORO=/GOROTool/Metamodels/GORO.ecore

module iStar2GORO;

create OUT : GORO from IN : iStar;

-- Returns all actors direct goals (root goals)
helper context iStar!iStarDiagram def : getElements () : OrderedSet(iStar!GoalTaskElement) =
	self.actors->iterate( element ; elements : OrderedSet(iStar!GoalTaskElement) = 
		OrderedSet{} | 
			elements.append(element.intentionalelements)
		)
	;


rule iStar2GORO {
	from
		istar : iStar!iStarDiagram
	
	to
		goro : GORO!Container (
			stakeholders <- istar.actors,
			requirements <- istar.getElements()
		)
}

rule Actor2Stakeholder {
	from
		istar : iStar!Actor
	
	to
		goro : GORO!RequirementsStakeholder (
			name <- istar.name,
			interestedIn <- istar.intentionalelements
		)
}

rule Goal2Goal {
	from
		istar : iStar!Goal 
	to
		goro : GORO!FunctionalHardgoalRequirementArtifact (
			name <- istar.name,
			refinements <- istar.refinements->select(el | not el.oclIsKindOf(iStar!Task) and not el.oclIsKindOf(iStar!Resource)),
			operationalizations <- istar.refinements->select(el | el.oclIsKindOf(iStar!Task)),
			refinementType <- istar.refinementType
		)
}

rule Quality2Softgoal {
	from
		istar : iStar!Quality
	to
		goro : GORO!NonFunctionalSoftgoalRequirementArtifact (
			name <- istar.name,
			refinements <- istar.refinements,
			refinementType <- istar.refinementType
		)
}

rule Task2Task {
	from 
		istar : iStar!Task
	to
		goro : GORO!Task (
			name <- istar.name,
			intendsToOperationalize <- istar.father
		)
}

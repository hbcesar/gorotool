-- @path iStar=/GOROTool/Metamodels/iStar.ecore
-- @path GORO=/GOROTool/Metamodels/GORO.ecore

module iStar2GORO;

create OUT : GORO from IN : iStar;

-- Returns all actors direct goals (root goals)
helper context iStar!iStarDiagram def : getElements () : OrderedSet(iStar!GoalTaskElement) =
	self.actors->iterate( element ; elements : OrderedSet(iStar!GoalTaskElement) = 
		OrderedSet{} | 
			elements.append(element.intentionalelements)
		)
	;


rule iStar2GORO {
	from
		istar : iStar!iStarDiagram
	
	to
		goro : GORO!GOROContainer (
			stakeholders <- istar.actors,
			GOREElements <- istar.getElements(),
			Contributions <- istar.contributions
		)
}

rule Actor2Stakeholder {
	from
		istar : iStar!Actor
	
	to
		goro : GORO!Stakeholder (
			name <- istar.name,
			interests <- istar.intentionalelements
		)
}

rule Goal2Goal {
	from
		istar : iStar!Goal 
	to
		goro : GORO!FunctionalHardgoal (
			name <- istar.name,
			refinements <- istar.refinements->select(el | not el.oclIsKindOf(iStar!Task) and not el.oclIsKindOf(iStar!Resource)),
			operationalizations <- istar.refinements->select(el | el.oclIsKindOf(iStar!Task)),
			refinementType <- istar.refinementType
		)
}

rule Quality2Softgoal {
	from
		istar : iStar!Quality
	to
		goro : GORO!NonFunctionalSoftgoal (
			name <- istar.name,
			refinements <- istar.refinements,
			refinementType <- istar.refinementType
		)
}

rule Task2Task {
	from 
		istar : iStar!Task
	to
		goro : GORO!Task (
			name <- istar.name,
			intendsToOperationalize <- istar.father
		)
}

rule Contribution2Contribution {
	from
		istar : iStar!Contribution
	to
		goro : GORO!Contribution (
			name <- istar.source.name + ' to ' + istar.target.name,
			source <- istar.source,
			target <- istar.target,
			intensity <- if istar.type = #break or istar.type = #make
						then #total
					else #partial
					endif,
			type <- if istar.type = #break or istar.type = #make
						then #positive
					else #negative
					endif
			
			
		)
}

-- @path Techne=/GOROTool/Metamodels/Techne.ecore
-- @path GORO=/GOROTool/Metamodels/GORO.ecore

module GORO2Techne;

create OUT : Techne from IN : GORO;


rule FunctionalHardgoal2Goal {
	from
		goro : GORO!FunctionalHardgoal
	to
		techne : Techne!Goal (
			name <- goro.name,
			relation <- goro.refinements->collect(i | thisModule.GoalInference(i))
			--conflicts <- goro.conflictsWith->collect(c | thisModule.GoalConflict(c))
			
		)
}

rule NonFunctionalSoftgoal2Softgoal {
	from
		goro : GORO!NonFunctionalSoftgoal
	to
		techne : Techne!Softgoal (
			name <- goro.name,
			relation <- goro.refinements->collect(e | thisModule.SoftgoalInference(e))
		)
}

rule NonFunctionalHardgoal2QualityConstraint {
	from
		goro : GORO!NonFunctionalHardgoal
	to
		techne : Techne!QualityConstraint (
			name <- goro.name,
			target <- goro.father->collect(e | thisModule.QualityConstraintInference(e))
		)
}

rule Task2Task {
	from
		goro : GORO!Task
	to
		techne : Techne!Task (
			name <- goro.name,
			relation <- goro.components->collect(e | thisModule.TaskInference(e))
		)
}

rule Assumption2DomainAssumption {
	from
		goro : GORO!Assumption
	to
		techne : Techne!DomainAssumption (
			name <- goro.name,
			relation <- goro.target->collect(e | thisModule.AssumptionInference(e))
		)
}


lazy rule GoalInference {
	from
		goro : GORO!FunctionalHardgoal
	to
		techne : Techne!InferenceNode ( 
			target <- goro
		)
}

lazy rule SoftgoalInference {
	from
		goro : GORO!NonFunctionalSoftgoal
	to
		techne : Techne!InferenceNode ( 
			target <- goro
		)
}

lazy rule QualityConstraintInference {
	from
		goro : GORO!NonFunctionalHardgoal
	to
		techne : Techne!InferenceNode ( 
			target <- goro
		)
}

lazy rule TaskInference {
	from
		goro : GORO!Task
	to
		techne : Techne!InferenceNode ( 
			target <- goro
		)
}

lazy rule AssumptionInference {
	from
		goro : GORO!Assumption
	to
		techne : Techne!InferenceNode ( 
			target <- goro
		)
}

lazy rule GoalConflict {
	from
		goro : GORO!FunctionalHardgoal
	to
		techne : Techne!ConflictNode (
			target <- goro
		)
}


lazy rule Container2Container {
	from
		goro : GORO!GOROContainer
	to
		techne : Techne!TechneContainer (
			ElementNodes <- GORO!GOREElementArtifact.allInstances()->select(el | not el.oclIsKindOf(GORO!Obstacle)),
			RelationalNodes <- Techne!InferenceNode.allInstances()
		)
}